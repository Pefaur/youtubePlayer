package  {		import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.system.Security;		import flash.display.StageAlign;	import flash.display.StageScaleMode;		import flash.display.StageDisplayState	import flash.events.FullScreenEvent		import flash.events.KeyboardEvent	import flash.ui.Keyboard;		import com.plural.youtube.media.YoutubePlayer	import com.plural.youtube.events.YoutubeEvent	import com.plural.youtube.controls.PlayerControls;	import com.plural.youtube.events.ControlEvent;		public class Main extends MovieClip {				private var player:YoutubePlayer;		private var playerControl:PlayerControls;		private var videoList:Array = new Array ('D_PcUJxY63Y','MLj6FqzXBPE','UdNllG_-nbU');				public function Main() {			init();		}				private function init(){						stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;						player = new YoutubePlayer();						//init player element			control.fullscreen.normal.visible = false;			control.btnpause.visible = false;									player.addEventListener(YoutubeEvent.ON_READY, onPlayerReady);			player.addEventListener(YoutubeEvent.ON_ERROR, onPlayerError);			player.addEventListener(YoutubeEvent.ON_STATE_CHANGE, onPlayerStateChange);			player.addEventListener(YoutubeEvent.ON_PLAYBACK_QUALITY_CHANGE, onVideoPlaybackQualityChange);		}						/*			YoutubeEvent handler		*/		private function onPlayerReady(e:YoutubeEvent):void{			// the player is ready, and we can access the youtube api Player			container.addChild(player);			playerEventHandler();		}				private function onPlayerError(e:YoutubeEvent):void{			trace('onPlayerError: '+e.type);		}				private function onPlayerStateChange(e:YoutubeEvent):void{			trace('onPlayerStateChange: '+e.type);		}				private function onVideoPlaybackQualityChange(e:YoutubeEvent):void{			trace('onVideoPlaybackQualityChange: '+e.type);		}				/*			Player handler		*/		private function playerEventHandler(){						//add the controls to the player			//parameters: player:YoutubePlayer, videoList:Array, sizeWidth:init(default 446), sizeHeight:init(default 250), autoplay:Boolean(default false)			playerControl = new PlayerControls(player, videoList, 446, 250, false);						// Play video 			control.btnplay.addEventListener(MouseEvent.CLICK, playerControl.play);						// Pause video 			control.btnpause.addEventListener(MouseEvent.CLICK, playerControl.pause);						// Next video 			control.nextVideo.addEventListener(MouseEvent.CLICK, playerControl.nextVideo);						//Prev Video			control.prevVideo.addEventListener(MouseEvent.CLICK, playerControl.prevVideo);			// Replay video 			control.replay.addEventListener(MouseEvent.CLICK, playerControl.replay);						// Mute and unmute 			control.mute.addEventListener(MouseEvent.CLICK, clicVolume);						// Fullscreen Event Listener			stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullscreenEvent);						// Goto Fullscreen			control.fullscreen.full.addEventListener(MouseEvent.CLICK, enterFullscreen);						// Goto Normal Screen			control.fullscreen.normal.addEventListener(MouseEvent.CLICK, leaveFullscreen);						// YoutubeEvent Listener...			player.addEventListener(YoutubeEvent.PLAYER_BUFFERING, 		bufferHandler);			player.addEventListener(YoutubeEvent.PLAYER_FINISHED, 		finishedHandler);			player.addEventListener(YoutubeEvent.PLAYER_PAUSED, 		pauseHandler);			player.addEventListener(YoutubeEvent.PLAYER_PLAYBACK, 		playbackHandler);			player.addEventListener(YoutubeEvent.PLAYER_QUEUED, 		queuedHandler);			player.addEventListener(YoutubeEvent.PLAYER_UNINITIALIZED, 	uninitializedHandler);						// Detect when the player switches to the next video			player.addEventListener(ControlEvent.NEXT_VIDEO, 	nextVideoHandler);						// Detect when the player switches to the prev video			player.addEventListener(ControlEvent.PREV_VIDEO, 	prevVideoHandler);		}				/*		*			Youtube Event handler		*		*/				/*			Play Video Handler		*/		private function playbackHandler (e:YoutubeEvent){			trace('play handler');			control.btnplay.visible = false;			control.btnpause.visible = true;		}				/*			Buffer Video hadler		*/		private function bufferHandler (e:YoutubeEvent){			trace('Buffer Video');		}				/* 			Finish Video handler		*/		private function finishedHandler (e:YoutubeEvent){			trace('Finish Video');		}				/*			Pause Video Handler		*/		private function pauseHandler (e:YoutubeEvent){			trace('Pause handler');			control.btnplay.visible = true;			control.btnpause.visible = false;		}								/*			Queued Video Handler		*/		private function queuedHandler (e:YoutubeEvent){			trace('Queued handler');		}				/*			player uninitialized		*/		private function uninitializedHandler (e:YoutubeEvent){			trace('player uninitialized');		}				/*			Set Volumen: mute and unmute					*/		private function clicVolume(e:MouseEvent){			if(!player.isMuted()){				player.mute();				control.mute.gotoAndStop(2);			}else{				player.unMute();				control.mute.gotoAndStop(1);			}		}				/*		*			Control Event Listener		*		*/		/* 			Next video Handler		*/		private function nextVideoHandler(e:ControlEvent):void{			trace("Current Video:", e.result.currentVideo)		}						/*			Prev video Handler		*/		private function prevVideoHandler(e:ControlEvent):void{			trace("Current Video:", e.result.currentVideo)		}						/*		*			Full Screen		*		*/		/*			Enter Fullscreen 		*/		private function enterFullscreen(e:MouseEvent):void {			stage.displayState = StageDisplayState.FULL_SCREEN;		}				/*			Exit Fullscreen 		*/		private function leaveFullscreen(e:MouseEvent):void {			stage.displayState = StageDisplayState.NORMAL;		}				/*			Fullscreen Event handler		*/		private function fullscreenEvent(e:FullScreenEvent):void {			if (stage.displayState == StageDisplayState.FULL_SCREEN) {				control.fullscreen.full.visible = true;				control.fullscreen.normal.visible = false;				setVideoFull();			} else {				control.fullscreen.normal.visible = false;				control.fullscreen.full.visible = true;				setVideoNormal();			}		}				/*			Detect ESCAPE key -> Exit full screen		*/		private function keyDetector(e:KeyboardEvent):void { 			if(e.keyCode == Keyboard.ESCAPE ){				stage.displayState = StageDisplayState.NORMAL;			} 		}				/*			Set player position in Normal Mode		*/		private function setVideoNormal(){			// Player position elements in normal mode			player.setSizePlayer(playerControl.width, playerControl.height);			container.x = 180;			container.y = 100;			control.x = 400;			control.y = 400;		}				/*			Set player position in Fullscreen Mode		*/		private function setVideoFull(){			//Player position elements in Fullscreen mode			player.setSizePlayer(stage.fullScreenWidth, stage.fullScreenHeight);			container.x = 0;			container.y = 0;			control.x = stage.fullScreenWidth*.5;			control.y = stage.fullScreenHeight-control.height;					}					}	}