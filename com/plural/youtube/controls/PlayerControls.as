package  com.plural.youtube.controls{		import flash.display.MovieClip;	import com.plural.youtube.events.YoutubeEvent;	import com.plural.youtube.events.ControlEvent;	import com.plural.youtube.media.YoutubePlayer;	import flash.events.Event;		/**	* PlayerControls	*	* @package youtube	* @author Nicolai Pefaur at PluralAndPartners <www.nicolai.cc>	* @license Apache V2 License	*	*/		public class PlayerControls {				private var player:YoutubePlayer;		private var videoList:Array;		private var currentVideo:int = 0;		private var _replayFrom:int = 0;		private var _reloadVideo:Boolean = true;		private var _w:int;		private var _h:int;				public function PlayerControls(player:YoutubePlayer, videoList:Array, w:int=446, h:int=250, autoPlay:Boolean=false) {			this.player = player;			this.videoList = videoList;			player.setSizePlayer(w, h);			_w = w; _h = h;			load(currentVideo, autoPlay);		}				public function play(e:Event){			player.dispatchEvent(new ControlEvent(ControlEvent.PLAY));		}				public function pause(e:Event){			player.dispatchEvent(new ControlEvent(ControlEvent.PAUSE));		}				public function stop(e:Event){			player.dispatchEvent(new ControlEvent(ControlEvent.STOP));		}				public function replay(e:Event){			player.dispatchEvent(new ControlEvent(ControlEvent.REPLAY, {'seconds':replayFrom, 'result':reloadVideo}));		}				public function nextVideo(e:Event){			if(currentVideo >= videoList.length-1){				currentVideo=0;			}else{				currentVideo++;			}			load(currentVideo);			player.dispatchEvent(new ControlEvent(ControlEvent.NEXT_VIDEO, {'currentVideo':currentVideo}));		}				public function prevVideo(e:Event){			if(currentVideo <= 0){				currentVideo=videoList.length-1;			}else{				currentVideo--;			}			load(currentVideo);			player.dispatchEvent(new ControlEvent(ControlEvent.PREV_VIDEO, {'currentVideo':currentVideo}));		}		/*			Video load		*/		private function load(index:int, autoPlay:Boolean=true){			player.load(videoList[index], autoPlay);		}				/*			getter and setter		*/		public function get replayFrom():int{			return _replayFrom		}				public function get reloadVideo ():Boolean{			return _reloadVideo;		}				public function get width ():int{			return _w;		}				public function get height():int{			return _h;		}		public function set replayFrom(value:int):void{			_replayFrom = value;		}				public function set reloadVideo (value:Boolean):void{			_reloadVideo = value;		}				}	}