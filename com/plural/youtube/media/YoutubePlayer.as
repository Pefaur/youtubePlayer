package  com.plural.youtube.media{			import flash.events.Event;		import flash.display.Loader;		import flash.net.URLRequest;		import flash.display.MovieClip;		import flash.system.Security		import com.plural.youtube.events.YoutubeEvent;		import com.plural.youtube.events.ControlEvent;				/**		* YoutubePlayer 		*		* @package youtube		* @author Nicolai Pefaur at PluralAndPartners <www.nicolai.cc>		* @license Apache V2 License		*		*/		public class YoutubePlayer extends MovieClip {			private var player:Object;			private var loader:Loader;			private var status:String;				public function YoutubePlayer() {				Security.loadPolicyFile("http://youtube.com/crossdomain.xml");				Security.allowDomain("*");				Security.allowInsecureDomain("*");								loader = new Loader();				loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);				loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));			}						private function onLoaderInit(event:Event):void {				addChild(loader);				loader.content.addEventListener("onReady", onPlayerReady);				loader.content.addEventListener("onError", onPlayerError);				loader.content.addEventListener("onStateChange", onPlayerStateChange);				loader.content.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);			}				private function onPlayerReady(event:Event):void {				player = loader.content;				dispatchEvent(new YoutubeEvent(YoutubeEvent.ON_READY, Object(event).data));				controlEventHadler();			}						private function controlEventHadler(){				this.addEventListener(ControlEvent.PLAY, playVideo);				this.addEventListener(ControlEvent.PAUSE, pauseVideo);				this.addEventListener(ControlEvent.STOP, stopVideo);				this.addEventListener(ControlEvent.REPLAY, replayVideo);				this.addEventListener(ControlEvent.NEXT_VIDEO, nextVideo);			}				private function onPlayerError(event:Event):void {				dispatchEvent(new YoutubeEvent(YoutubeEvent.ON_ERROR, Object(event).data));			}				private function onPlayerStateChange(event:Event):void {				dispatchEvent(new YoutubeEvent(YoutubeEvent.ON_STATE_CHANGE, Object(event).data));				switch (Object(event).data) { 					case -1: dispatchEvent(new YoutubeEvent(YoutubeEvent.PLAYER_UNINITIALIZED));break;					case 0 : dispatchEvent(new YoutubeEvent(YoutubeEvent.PLAYER_FINISHED));break;					case 1 : dispatchEvent(new YoutubeEvent(YoutubeEvent.PLAYER_PLAYBACK));break;					case 2 : dispatchEvent(new YoutubeEvent(YoutubeEvent.PLAYER_PAUSED));break;					case 3 : dispatchEvent(new YoutubeEvent(YoutubeEvent.PLAYER_BUFFERING));break;					case 5 : dispatchEvent(new YoutubeEvent(YoutubeEvent.PLAYER_QUEUED));break;				}			}				private function onVideoPlaybackQualityChange(event:Event):void {				dispatchEvent(new YoutubeEvent(YoutubeEvent.ON_PLAYBACK_QUALITY_CHANGE, Object(event).data));			}						public function setVideoId(id:String, startTime:int =0):void{				player.cueVideoById(id, startTime);			}									/*				Heandler Control Event			*/			private function playVideo(e:ControlEvent){				player.playVideo();			}						private function pauseVideo(e:ControlEvent){				player.pauseVideo();			}						private function stopVideo(e:ControlEvent){				player.stopVideo();			}						private function replayVideo(e:ControlEvent){				player.pauseVideo();				player.seekTo(e.result.seconds, e.result.result);				player.playVideo();			}						private function nextVideo(e:ControlEvent){			}						/*				Public Functions			*/			public function load(id:String, autoPlay:Boolean= true){				setVideoId(id);				player.playVideo();				if(!autoPlay) player.pauseVideo();			}						public function mute(){				player.mute();			}						public function unMute(){				player.unMute();			}						public function isMuted():Boolean{				return player.isMuted();			}						public function setVolume(valume:int=100){				player.setVolume(valume);			}						public function getVolume():int{				return player.getVolume();			}						public function setSizePlayer(w:int, h:int){				player.setSize(w, h);			}		}}